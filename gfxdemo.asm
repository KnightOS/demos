; KnightOS graphical demo
; Portions of the color demo provided by Christopher Mitchell
.nolist
#include "kernel.inc"
#include "applib.inc"
#include "gfxdemo.lang"
.list
    .db 0, 500 ; Stack size
.org 0
    jr start
    .db 'K'
    .db 0b00000010
    .db lang_description, 0
start:
    ; Load dependencies
    kld(de, applibPath)
    call loadLibrary
    
    call getLcdLock
    call getKeypadLock

    call colorSupported
    jr nz, .noColor
    ; Short intro message in legacy mode
    call allocScreenBuffer
    call clearBuffer
    kld(hl, introString)
    ld de, 0
    ld b, 0
    call drawStr
    call fastCopy
    call flushKeys
    call waitKey
    call resetLegacyLcdMode

_:  ld iy, 0b1111100000000000 ; Red
    call clearColorLcd
    call flushKeys
    applib(appWaitKey)
    jr nz, -_

_:  ld iy, 0b0000011111100000 ; Green
    call clearColorLcd
    call flushKeys
    applib(appWaitKey)
    jr nz, -_

_:  ld iy, 0b0000000000011111 ; Blue
    call clearColorLcd
    call flushKeys
    applib(appWaitKey)
    jr nz, -_

    kjp(ballDemo)

.noColor:
    call allocScreenBuffer
    
    kld(hl, windowTitle)
    xor a
    applib(drawWindow)
    
    ld b, 2
    ld de, 0x0208
    kld(hl, exitString)
    call drawStr
    
    kld(hl, smileySprite)
    ld de, 0x0210
_:  ld b, 5
    call putSpriteXor
    call fastCopy
    applib(appGetKey)
    call putSpriteXor
    cp kClear
    ret z
    cp kUp
    jr z, doUp
    cp kDown
    jr z, doDown
    cp kLeft
    jr z, doLeft
    cp kRight
    jr z, doRight
    jr -_
doUp:
    dec e
    jr -_
doDown:
    inc e
    jr -_
doLeft:
    dec d
    jr -_
doRight:
    inc d
    jr -_
    
threadListPath:
    .db "/bin/threadlist", 0
    
exitString:
    .db lang_exitString, 0
windowTitle:
    .db lang_windowTitle, 0
applibPath:
    .db "/lib/applib", 0
smileySprite:
    .db 0b01010000
    .db 0b01010000
    .db 0b00000000
    .db 0b10001000
    .db 0b01110000
introString:
    .db "Graphical demo for KnightOS\n\n"
    .db "Portions of this demo by\nChristopher Mitchell\n\n"
    .db "Press any key to begin.", 0

.equ nballs 10
ballDemo:
    ld iy, 0xFFFF
    call clearColorLcd
    ld bc, nballs * 5 + 1
    call malloc
    inc ix
    ld a, r
    ld (ix + -1), a
    ld a, 1
    ld b, nballs
    push ix \ pop hl
    ld de, 8 ;starting x
    ;ld c,5  ;starting y
InitSetupLoop:
    ld (hl), e ;x
    inc hl
    ld (hl), d ;x
    inc hl
    push hl
        kcall(LFSR_PRNG)
    pop hl
    and 0x02
    dec a
    ld (hl), a ;x velocity
    inc hl
    push hl
        kcall(LFSR_PRNG)
    pop hl
    cp 240 - 16
    jr c,InitSetupLoop_XOK
    and 0x7F
InitSetupLoop_XOK:
    ld (hl), a ;y
    inc hl
    push hl
        kcall(LFSR_PRNG)
    pop hl
    and 0x02
    dec a
    ld (hl), a ;y velocity
    inc hl
    push hl
        ld hl, 20
        add hl, de
    pop de
    ex de, hl
    ld a, 10
    add a, c
    ld c, a
    djnz initSetupLoop
    
ballTime:
    ld b, nballs
    push ix \ pop hl
ballTimeLoop:
    push hl
        ld e, (hl)
        inc hl
        ld d, (hl)
        inc hl
        push hl
            ex de, hl
            ld a, 0x52 ;"Vertical" = X for us
            call writeLcdRegister
            ld a, 0x21 ;"Vertical" = X for us
            call writeLcdRegister
            push hl
                ld de, 15
                add hl, de
                ld a, 0x53 ;"Vertical" = X for us
                call writeLcdRegister
                pop hl
            pop de
        ld a, (de)
        ld e, a
        ld d, 0
        cp 0xFF
        jr nz, ballTimeLoop_CheckReverse
        ld d, 0xFF
ballTimeLoop_CheckReverse:
        add hl, de
        pop de
    ex de, hl
    ld (hl), e
    inc hl
    ld (hl), d
    inc hl
    push hl
        ld hl, 320 - 16
        or a
        sbc hl, de
        add hl, de ; cpHLDE
        jr z, ballTimeLoop_DoXFlip
        ld a, e
        or d
        jr nz, ballTimeLoop_NoXFlip
ballTimeLoop_DoXFlip:
        pop hl
    ld c, (hl)
    xor a
    sub c
    ld (hl), a
    push hl
ballTimeLoop_NoXFlip:
        pop hl
    inc hl
    push hl
        ld e, (hl)
        inc hl
        push hl
            ex de, hl
            ld h, 0
            ld a, 0x50 ;"Horizontal" = Y for us
            call writeLcdRegister
            ld h, 0
            ld a, 0x20 ;"Horizontal" = Y for us
            call writeLcdRegister
        pop de
        ld a, (de)
        add a, l
        pop de
    ex de, hl
    ld (hl), a
    inc hl
    push hl
        cp 240 - 16
        jr z,BallTimeLoop_DoYFlip
        or a
        jr nz, ballTimeLoop_NoYFlip
ballTimeLoop_DoYFlip:
        pop hl
    ld c, (hl)
    xor a
    sub c
    ld (hl), a
    push hl
ballTimeLoop_NoYFlip:
        pop hl
    inc hl

    push hl
        ld a, 0x22 \ ld c, 0x10 \ out (c),0 \ out (c),a

        push bc
            ld bc, 0x0011 ; 16*16
            kld(hl, redBall)
ballRender1:
            outi
            jr nz, ballRender1
ballRender2:
            outi
            jr nz, ballRender2
            pop bc
        pop hl
    dec b
    ld a, b
    kjp(nz, BallTimeLoop)
    
    applib(appGetKey)
    call nz, clearColorLcd
    cp kClear
    kjp(nz, ballTime)

    jp fullScreenWindow

LFSR_PRNG:
    ld a, (ix + -1)
    rrca
    ld (ix + -1), a
    jr nc, +_
    xor 0b00111000
    ld  (ix + -1), a
_:  set 6, a
    ret

redBall:
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xff, 0xff, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xff, 0xff, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x88, 0x02, 0x00, 0x00, 0xff, 0xff
    .db 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x88, 0x02, 0x00, 0x00, 0xff, 0xff
    .db 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x88, 0x02, 0x88, 0x02, 0x00, 0x00, 0xff, 0xff
    .db 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x00, 0x00, 0xff, 0xff
    .db 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x88, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
